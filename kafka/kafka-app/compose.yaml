version: "3.8"
services:
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    volumes:
      - kafka-persistence:/bitnami/kafka

  # responsible in out case for creating topics
  admin-service:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      TOPICS_TO_CREATE: users
    volumes:
      - ${PWD}:/app
      - topicmodules:/app/node_modules
    command: sh -c "npm install && npx tsx topic.ts"
    depends_on:
      - kafka

  producer1:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      PRODUCER_TOPIC: users
    volumes:
      - ${PWD}:/app
      - topicmodules:/app/node_modules
    command: sh -c "npm install && npx tsx producer.ts"

    depends_on:
      - kafka

  consumer1:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      CONSUMER_GROUP: consumergroup1
      SUBSCRIBED_TOPICS: users
    volumes:
      - ${PWD}:/app
      - topicmodules:/app/node_modules
    command: sh -c "npm install && npx tsx consumer.ts"

    depends_on:
      - kafka
      - producer1

  consumer2:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      CONSUMER_GROUP: consumergroup1
      SUBSCRIBED_TOPICS: users
    volumes:
      - ${PWD}:/app
      - topicmodules:/app/node_modules
    command: sh -c "npm install && npx tsx consumer.ts"

    depends_on:
      - kafka
      - producer1

    # extra_hosts:
    #   - "host.docker.internal:host-gateway"
    # volumes:
    #   - kafka-persistence:/bitnami/kafka

  

volumes:
  topicmodules:
  topiclock:
  kafka-persistence: